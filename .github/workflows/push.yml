name: build runtime
on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  build-mac:
#    if: ${{ false }}  # disable
    name: mac
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        platform: [arm64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v5
        with:
          go-version: '^1.22.1'
      - name: compile runtime
        run: |
          make ARCH=${{ matrix.platform }} lo
      - name: check
        env:
          LO_HOME: ${{ github.workspace }}
          PREFIX: /opt/homebrew/opt
        run: |
          make check
          pip install jsonschema
          brew install lz4 zstd openssl@3
          ./lo test/build.js
          ./lo build runtime runtime/lo
      - name: upload runtime artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/lo
          name: lo-mac-${{ matrix.platform }}

  build-mac-x64:
#    if: ${{ false }}  # disable
    name: mac-x64
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        platform: [x64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v5
        with:
          go-version: '^1.22.1'
      - name: compile runtime
        run: |
          make ARCH=${{ matrix.platform }} lo
      - name: check
        env:
          LO_HOME: ${{ github.workspace }}
          PREFIX: /opt/homebrew/opt
        run: |
          make check
          pip install jsonschema jinja2
          brew install lz4 zstd openssl@3
          ./lo test/build.js
          ./lo build runtime runtime/lo
      - name: upload runtime artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/lo
          name: lo-mac-${{ matrix.platform }}

  build-linux:
#    if: ${{ false }}  # disable
    name: linux
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        platform: [x64]
    steps:
      - uses: actions/checkout@v3
      - name: install libcurl
        run: |
          sudo apt-get update -y
          sudo apt-get install -qy libcurl4-openssl-dev
      - name: compile
        run: |
          make ARCH=${{ matrix.platform }} lo
      - name: check
        env:
          LO_HOME: ${{ github.workspace }}
        run: |
          make check
          sudo apt-get install -qy libffi-dev liblz4-dev libseccomp-dev libsqlite3-dev libtcc-dev zlib1g-dev tcc
          ./lo test/build.js
          ./lo build runtime runtime/lo
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/lo
          name: lo-linux-${{ matrix.platform }}

  build-linux-arm64:
#    if: ${{ false }}  # disable
    name: linux
    runs-on: ubuntu-22.04-arm
    strategy:
      fail-fast: false
      matrix:
        platform: [arm64]
    steps:
      - uses: actions/checkout@v3
      - name: install libcurl
        run: |
          sudo apt-get update -y
          sudo apt-get install -qy libcurl4-openssl-dev
      - name: compile
        run: |
          make ARCH=${{ matrix.platform }} lo
      - name: check
        env:
          LO_HOME: ${{ github.workspace }}
        run: |
          make check
          sudo apt-get install -qy libffi-dev liblz4-dev libseccomp-dev libsqlite3-dev libtcc-dev zlib1g-dev tcc
          ./lo test/build.js
          ./lo build runtime runtime/lo
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/lo
          name: lo-linux-${{ matrix.platform }}

  build-windows:
    if: ${{ false }}  # disable
    name: windows
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        platform: [x64,arm64]
    steps:
      - uses: actions/checkout@v3
      - name: Install MSVC/MCBuild (Windows)
        uses: microsoft/setup-msbuild@v1.0.2
      - name: compile
        run: |
          make BINDINGS= ARCH=${{ matrix.platform }} lo.exe
      - name: check
        run: |
          make check
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/lo.exe
          name: lo.exe
